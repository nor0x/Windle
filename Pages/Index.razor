@page "/"
@using System.Net.Http
@inject HttpClient Http
@inject IJSRuntime js


<main class="e-face e-fullscreen main-container">
    <nav class="e-nav no-bg">
        <label for="e-menu" class="e-btn circle small no-shadow no-desktop"><i class="fas fa-bars"></i></label>
        <input type="checkbox" id="e-menu">
        <div class="e-menu no-shadow">
            <a class="e-btn circle white" href="https://github.com/nor0x/Windle" target="_blank"><i class="fab fa-github text-dark"></i></a>
            <a class="e-btn circle white" href="https://twitter.com/johnny_leo" target="_blank"><i class="fab fa-twitter text-dark"></i></a>
            <a class="e-btn circle white" href="https://www.buymeacoffee.com/j0hnny" target="_blank"><i class="fas fa-mug-hot text-dark"></i></a>
            <i class="e-distribution"></i>

        </div>
    </nav>

    <section class="face-body centered">
        <div class="e-container eUp">
            @if (isLoading)
            {
                <?xml version="1.0" encoding="utf-8" ?>
                <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" style="margin: auto; background: none; display: block; shape-rendering: auto;" width="80px" height="80px" viewBox="0 0 100 100" preserveAspectRatio="xMidYMid">
                    <g transform="rotate(0 50 50)">
                        <rect x="47" y="21" rx="3" ry="3.24" width="6" height="12" fill="#45cafc">
                            <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="0.7575757575757576s" begin="-0.6944444444444444s" repeatCount="indefinite"></animate>
                        </rect>
                    </g>
                    <g transform="rotate(30 50 50)">
                        <rect x="47" y="21" rx="3" ry="3.24" width="6" height="12" fill="#303f9f">
                            <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="0.7575757575757576s" begin="-0.6313131313131313s" repeatCount="indefinite"></animate>
                        </rect>
                    </g>
                    <g transform="rotate(60 50 50)">
                        <rect x="47" y="21" rx="3" ry="3.24" width="6" height="12" fill="#45cafc">
                            <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="0.7575757575757576s" begin="-0.5681818181818182s" repeatCount="indefinite"></animate>
                        </rect>
                    </g>
                    <g transform="rotate(90 50 50)">
                        <rect x="47" y="21" rx="3" ry="3.24" width="6" height="12" fill="#303f9f">
                            <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="0.7575757575757576s" begin="-0.5050505050505051s" repeatCount="indefinite"></animate>
                        </rect>
                    </g>
                    <g transform="rotate(120 50 50)">
                        <rect x="47" y="21" rx="3" ry="3.24" width="6" height="12" fill="#45cafc">
                            <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="0.7575757575757576s" begin="-0.44191919191919193s" repeatCount="indefinite"></animate>
                        </rect>
                    </g>
                    <g transform="rotate(150 50 50)">
                        <rect x="47" y="21" rx="3" ry="3.24" width="6" height="12" fill="#303f9f">
                            <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="0.7575757575757576s" begin="-0.3787878787878788s" repeatCount="indefinite"></animate>
                        </rect>
                    </g>
                    <g transform="rotate(180 50 50)">
                        <rect x="47" y="21" rx="3" ry="3.24" width="6" height="12" fill="#45cafc">
                            <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="0.7575757575757576s" begin="-0.31565656565656564s" repeatCount="indefinite"></animate>
                        </rect>
                    </g>
                    <g transform="rotate(210 50 50)">
                        <rect x="47" y="21" rx="3" ry="3.24" width="6" height="12" fill="#303f9f">
                            <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="0.7575757575757576s" begin="-0.25252525252525254s" repeatCount="indefinite"></animate>
                        </rect>
                    </g>
                    <g transform="rotate(240 50 50)">
                        <rect x="47" y="21" rx="3" ry="3.24" width="6" height="12" fill="#45cafc">
                            <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="0.7575757575757576s" begin="-0.1893939393939394s" repeatCount="indefinite"></animate>
                        </rect>
                    </g>
                    <g transform="rotate(270 50 50)">
                        <rect x="47" y="21" rx="3" ry="3.24" width="6" height="12" fill="#303f9f">
                            <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="0.7575757575757576s" begin="-0.12626262626262627s" repeatCount="indefinite"></animate>
                        </rect>
                    </g>
                    <g transform="rotate(300 50 50)">
                        <rect x="47" y="21" rx="3" ry="3.24" width="6" height="12" fill="#45cafc">
                            <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="0.7575757575757576s" begin="-0.06313131313131314s" repeatCount="indefinite"></animate>
                        </rect>
                    </g>
                    <g transform="rotate(330 50 50)">
                        <rect x="47" y="21" rx="3" ry="3.24" width="6" height="12" fill="#303f9f">
                            <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="0.7575757575757576s" begin="0s" repeatCount="indefinite"></animate>
                        </rect>
                    </g>
                </svg>
            }
            else
            {
                @if (done)
                {
                    <h1 class="size-plus">
                        ✅
                    </h1>
                    <h2 class="size-plus">
                        done!
                    </h2>
                    <p>
                        check your kindle
                    </p>
                }
                else if (error)
                {
                    <h1 class="size-plus">
                        💥
                    </h1>
                    <h2 class="size-plus">
                        something is wrong
                    </h2>
                    <p>
                        please try again
                    </p>
                }
                else
                {
                    <h1 class="size-plus">
                        👋
                    </h1>
                    <h2 class="size-plus">
                        this is windle
                    </h2>
                    <p>
                        an easy way to clip website directly to your kindle reader
                    </p>
                }
            }


        <form class="rounded default">
            <!-- Here -->
            <div class="e-form-group">
                <input class="e-control" type="text" @bind="Url" placeholder="website goes here..." disabled="@isLoading">
            </div>

            <div class="e-form-group unified">
                <input class="e-control" type="text" @bind="Email" placeholder="kindle email goes here..." disabled="@isLoading">
                <a href="https://www.amazon.com/gp/help/customer/display.html?nodeId=201974220" target="_blank" class="e-btn primary rounded-button">?</a>
            </div>

            <a id="go-button" class="e-btn outlined rounded fullwidth white plus" @onclick="Clip" disabled="@isLoading">Go!</a>
            @if (showDownload)
            {
                <a class="e-btn circle" @onclick="Download"><i class="fas fa-file-download"></i></a>
            }

        </form>
        </div>
    </section>
</main>


@code
{
    string Url { get; set; }
    string Email { get; set; }

    bool done { get; set; }
    bool error { get; set; }
    bool showDownload { get; set; }
    static bool isLoading { get; set; }

    string isLoadingClass = "is-loading";
    string isEnabledClass = "is-static";
    byte[] byteContent;
    string filename;

    string inputClass = CssBuilder.Default("control is-large").AddClass("is-static", isLoading).Build();
    string buttonClass = CssBuilder.Default("button").AddClass("is-loading", isLoading).Build();
    Timer timer = new Timer();

    async Task Clip()
    {
        isLoading = true;
        StateHasChanged();

        if (!string.IsNullOrEmpty(Url) || !string.IsNullOrEmpty(Email))
        {
            Debug.WriteLine("email and url are not empty");
            if (IsValidEmail(Email) && IsValidUrl(Url))
            {
                Debug.WriteLine("email and url are valid");
                SmartReader.Article article = await SmartReader.Reader.ParseArticleAsync("https://cors-anywhere.herokuapp.com/" + Url);

                try
                {
                    if (article.IsReadable)
                    {
                        //get all images in content and base64 them
                        string pattern = @"(?i)<img.*?src=""(?<url>.*?)"".*?>";
                        Regex rx = new Regex(pattern);
                        var content = article.Content;
                        foreach (Match m in rx.Matches(content))
                        {
                            var url = m.Groups["url"].Value;
                            var imageUri = new Uri(url);
                            Http.DefaultRequestHeaders.Add("x-requested-with", "XMLHttpRequest");
                            var imageBytes = await Http.GetByteArrayAsync("https://cors-anywhere.herokuapp.com/" + url);
                            string imgPath = String.Format("{0}{1}{2}{3}", imageUri.Scheme, Uri.SchemeDelimiter, imageUri.Authority, imageUri.AbsolutePath);
                            string headerImageExtension = System.IO.Path.GetExtension(imgPath).Replace(".", "");
                            if (headerImageExtension == "jpg") headerImageExtension = "jpeg";

                            string base64String = Convert.ToBase64String(imageBytes);

                            content = content.Replace(m.Value, @"<img src=""data:image/" + headerImageExtension + ";base64, " + base64String + @""" />");
                        }



                        var header = "<h1>" + article.Title + "</h1>";
                        var uri = new Uri(Url);
                        header = header + "<h2>" + article.Author + " @ " + uri.Host.ToString() + "</h2>";

                        if (!string.IsNullOrEmpty(article.FeaturedImage))
                        {
                            var imageUri = new Uri(article.FeaturedImage);
                            var imageBytes = await Http.GetByteArrayAsync("https://cors-anywhere.herokuapp.com/" + article.FeaturedImage);
                            string imgPath = String.Format("{0}{1}{2}{3}", imageUri.Scheme, Uri.SchemeDelimiter, imageUri.Authority, imageUri.AbsolutePath);
                            string headerImageExtension = System.IO.Path.GetExtension(imgPath).Replace(".", "");
                            if (headerImageExtension == "jpg") headerImageExtension = "jpeg";

                            string base64String = Convert.ToBase64String(imageBytes);

                            header = header + @"<img src=""data:image/" + headerImageExtension + ";base64, " + base64String + @""" />";
                        }

                        var cleanedHtml = header + content;
                        cleanedHtml = @"<html><head></head><body>" + cleanedHtml + "</body></html>";
                        //cleanedHtml = @"<html><head><meta charset=""UTF-8""></head><body>" + cleanedHtml + "</body></html>";


                        Encoding iso = Encoding.GetEncoding("ISO-8859-1");
                        Encoding utf8 = Encoding.UTF8;
                        byte[] utfBytes = utf8.GetBytes(cleanedHtml);
                        byteContent = Encoding.Convert(utf8, iso, utfBytes);


                        char[] invalids = Path.GetInvalidFileNameChars();
                        filename = new string(article.Title.Select(c => invalids.Contains(c) ? '_' : c).ToArray()).Replace(" ", "_") + ".html";

                        MultipartFormDataContent form = new MultipartFormDataContent();
                        form.Add(new StringContent(Email), "email");
                        form.Add(new StringContent(filename), "filename");
                        form.Add(new ByteArrayContent(byteContent, 0, byteContent.Length), "attachment", filename);
                        HttpResponseMessage response = await Http.PostAsync("https://prod-91.westeurope.logic.azure.com:443/workflows/4688941b82df448eb6e0a88b511dd602/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=ZlC2uIxY9hR4xSkDjTZDnqNQQAc9vXl6yrvf5awcoXU", form);

                        Email = string.Empty;
                        Url = string.Empty;
                        showDownload = true;
                        UpdateUI(false, false);
                    }
                    else
                    {
                        UpdateUI(false, true);
                    }
                }
                catch(Exception e)
                {
                    UpdateUI(false, true);
                }
            }
            else
            {
                UpdateUI(false, true);
            }
        }
        else
        {
            UpdateUI(false, true);
        }
    }

    void Download()
    {
        if (byteContent.Length != 0 && !string.IsNullOrEmpty(filename))
        {
            FileUtil.SaveAs(js, filename, byteContent);
            showDownload = false;
            StateHasChanged();
        }
    }

        void UpdateUI(bool il, bool er)
        {
            isLoading = il;
            done = !er;
            error = er;
            timer.Interval = 1800;
            timer.Start();
            timer.Elapsed += (s, e) =>
            {
                timer.Stop();
                done = false;
                error = false;
                StateHasChanged();

            };
            StateHasChanged();
        }

        bool IsValidEmail(string email)
        {
            try
            {
                var addr = new System.Net.Mail.MailAddress(email);
                return addr.Address == email;
            }
            catch
            {
                return false;
            }
        }

        bool IsValidUrl(string url)
        {
            Uri uriResult;
            bool result = Uri.TryCreate(url, UriKind.Absolute, out uriResult)
                && (uriResult.Scheme == Uri.UriSchemeHttp || uriResult.Scheme == Uri.UriSchemeHttps);
            return result;
        }
    }